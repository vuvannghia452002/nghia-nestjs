1
00:00:00,960 --> 00:00:09,220
Health checks are an essential part of any production-ready application. They allow us to monitor the health of our application as well as its dependencies.

2
00:00:09,330 --> 00:00:22,990
Database external services etc and quickly detect any issues that may arise. Most cloud providers and container orchestrators also use health checks to determine if our applique patient is healthy and ready to receive traffic.

3
00:00:23,250 --> 00:00:34,360
In this lesson will learn how to add health checks to our nest js services. Before we proceed. Let's install the nastiest terminus package that will use to add health checks to our services.

4
00:00:35,520 --> 00:00:45,400
Once the installation process is complete let's generate a new health module and health controller using the necessary osceola in the virtual dash facility application.

5
00:00:46,080 --> 00:00:57,550
So let's run the following commands. Nest g module health and nest g controller help. Next let's import the terminus module into the health module.

6
00:01:00,900 --> 00:01:10,360
Great. But the terminus module imported we can now navigate to the health controller and add a new get and point that will return the health of our application.

7
00:01:11,070 --> 00:01:17,080
So far it always returns true but we'll update this method in a bit to return the actual health of our application.

8
00:01:17,550 --> 00:01:26,830
Though let's inject the health checks service and type r m health indicator into the health controller and use them to check the actual health of our application.

9
00:01:30,090 --> 00:01:42,360
And lastly let's not forget to annotate the is healthy method with the health check decorator. Right let's save our changes head of her to our terminal and run the following command to test everything out.

10
00:01:42,810 --> 00:01:50,680
Curl get local hosts three thousand slash health. And as we can see in the response it seems that everything is working as expected fantastic.

11
00:01:51,540 --> 00:02:03,400
Before we wrap up this lesson let's add health checks to the workflows service application as well. So let's start by generating a new health module an health controller they're using the nes jsc a again.

12
00:02:03,480 --> 00:02:14,680
Nest g module health and nest g controller health. And then replaced the contents of the health controller with the same code we used in the virtual facility application.

13
00:02:16,350 --> 00:02:23,440
And similarly let's replace the contents of the health module with the same code we used once again in the virtual facility application.

14
00:02:24,420 --> 00:02:35,170
And that's it perfect. As we can see our health modules are currently identical so we could technically extract the common code into a shared library and reuse it in both applications.

15
00:02:35,430 --> 00:02:44,350
However as our application grows. Will probably want to add more health checks to each application and they will start to diverge therefore will keep them separate.

16
00:02:45,000 --> 00:02:58,230
Health checks are vital to any back and application and especially important for microservices we need to always be aware if any single service goes down to do any variety of reasons so we can have fail safes and place to recover the service.

17
00:02:58,560 --> 00:03:09,340
Making sure we don't lose any transactional data etc. Although these topics are out of the scope of this course having health checks already in place is a great starting point for our application.

