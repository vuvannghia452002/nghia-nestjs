1
00:00:01,020 --> 00:00:11,520
Micro services are a software development technique. A variant of the service oriented architecture or esa way architectural style that structures and application as a collection of loosely coupled.

2
00:00:11,880 --> 00:00:25,180
Fine grained services. With microservices. We could organize our backend as a set of services that are highly maintainable testable independently deployable in organized around business capabilities.

3
00:00:25,920 --> 00:00:32,320
Often times they are owned by a small team since microservices encapsulate specific smaller domains.

4
00:00:33,149 --> 00:00:38,920
The benefits of microservices are numerous let's look at some of the most important and valuable benefits.

5
00:00:39,180 --> 00:00:46,510
Independent deployments. We can deploy each service independently. Which means we can deploy more often and faster.

6
00:00:46,590 --> 00:00:52,840
We can also scale each service independently which means we can scale only the services that need to be scaled.

7
00:00:53,610 --> 00:01:04,090
Modularity. This makes the application easier to understand develop and test. Different teams can work on different services without having to know the details of other services.

8
00:01:04,830 --> 00:01:14,380
Technology diversity. We could use different technologies for different services for example we can use know js for one service and java for another service.

9
00:01:14,760 --> 00:01:26,530
On the other hand microservices also have some drawbacks. Complexity. With microservices we need to deal with distributed systems which are more complex than the monolithic applications.

10
00:01:26,850 --> 00:01:33,310
Also enter service communication has a higher latency then in-process calls in monolithic applications.

11
00:01:34,380 --> 00:01:45,910
Data consistency. Maintaining data consistency across services is challenging. Some operations may require transactions that span multiple services which is not that simple to implement.

12
00:01:46,530 --> 00:01:54,250
Testing. Testing microservices is more complex than testing monolithic applications. The test each service in isolation.

13
00:01:54,360 --> 00:02:02,920
We need to mock all the other services. Also we need to test the integration between services and to end and integration tests.

14
00:02:03,660 --> 00:02:12,310
And deployment complexity. We need to deploy multiple services here which is of course more complex than deploying a single monolithic application.

15
00:02:12,720 --> 00:02:23,350
And of course there are several others that we didn't get to dive into here. So as we can see. Microservice architecture has its fair share of pros and cons as thus everything and software development.

16
00:02:24,000 --> 00:02:30,750
It's not a silver bullet and it's not suitable for every application as a introduces additional complexity and overhead.

17
00:02:31,080 --> 00:02:39,520
New problems and new challenges that we need to deal with such as network latency. Fault tolerance data consistency etc.

18
00:02:39,930 --> 00:02:48,550
As software developers will need to always carefully consider the pros and cons before we decide to use microservices for any given system we're working on.

