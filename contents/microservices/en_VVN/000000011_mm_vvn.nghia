1
00:00:00,750 --> 00:00:09,971
In this lesson let's dive into an learn about the differences between the request response and event driven communication styles and when to use each one of them.

2
00:00:10,950 --> 00:00:17,010
The request response message thou is useful when you need to exchange messages between various external services.

3
00:00:17,370 --> 00:00:26,470
With this paradigm you can be certain that a service has actually received the message without the need to manually implement message acknowledgment or act protocol.

4
00:00:27,720 --> 00:00:35,580
Like any software development paradigm nothing is a silver bullet. Try to keep in mind that the request response paradigm is not always the best choice.

5
00:00:35,970 --> 00:00:46,990
For example trimming transporters that use log base persistence such as kafka are optimized for solving a different range of issues or aligned with an event messaging paradigm.

6
00:00:47,970 --> 00:00:55,590
To enable the request response message type. Ness create to logical channels one is responsible for transferring the data.

7
00:00:55,980 --> 00:01:04,960
While the other waits for incoming responses. Are some underlying transports such as nats this dual channel support is provided out of the box.

8
00:01:05,460 --> 00:01:17,620
Or others nest compensates by me manually creating separate channels that can be an overhead for this so if you do not require a request response message thou you should consider using the event based method.

9
00:01:17,940 --> 00:01:24,100
To create a message handler based on their request response paradigm we can use the message pattern decorator.

10
00:01:24,330 --> 00:01:32,010
While the request response method is ideal for exchanging messages between services. It is less suitable when your message thou is event based.

11
00:01:32,400 --> 00:01:43,120
For example. When you just want to publish events without waiting for a response. In that case. You do not need the overhead required by request response for maintaining two channels.

12
00:01:44,160 --> 00:01:49,350
Suppose you would like to simply notify another service that a certain condition has occurred in this part of the system.

13
00:01:49,830 --> 00:01:59,080
If that's your use case then you should most likely use the event based message style. To declare an event handler we can simply as the event pattern decorator.

14
00:02:00,090 --> 00:02:08,610
Nest provides several built-in transport strategies including http. Nats kafka. Rabbit m q and many others.

15
00:02:09,120 --> 00:02:18,340
Each of these transport strategies can be used for both request response and event based communication styles but some of them are better suited for one not the other.

16
00:02:18,720 --> 00:02:25,320
For example http is a request response protocol so it's better suited for a request response communication style.

17
00:02:25,890 --> 00:02:32,470
On the other hand Africa is a message broker so it's better suited for an event based communication style.

18
00:02:33,210 --> 00:02:40,350
With ness js we can also integrate with other protocols and message brokers by creating our own custom transport strategies.

19
00:02:40,680 --> 00:02:51,460
However we won't be diving into this topic in this course so. If you're interested in learning more about this check out the official nastiest documentation in a link can be found rebel the course video.

